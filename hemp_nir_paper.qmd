---
title: Near Infrared Spectroscopy Predicts Crude Protein Concentration in Hemp Grain
execute:
  freeze: auto
  echo: false
author:
  - name: Ryan V. Crawford
    orcid: 0009-0006-3052-3269
    corresponding: true
    email: rvc3@cornell.edu
    affiliations:
      - name: Cornell University
        address: 126 Medicago Drive
        city: Ithaca
        state: NY
        postal-code: 14853
  - name: Jamie L. Crawford
    orcid: 0009-0002-2523-3479
    corresponding: false
    affiliations:
      - name: Cornell University
        address: 126 Medicago Drive
        city: Ithaca
        state: NY
        postal-code: 14853
  - name: Julie L. Hansen
    orcid: 0000-0001-7247-9186
    corresponding: false
    affiliations:
      - name: Cornell University
        address: 126 Medicago Drive
        city: Ithaca
        state: NY
        postal-code: 14853
  - name: Lawrence B. Smart
    orcid: 0000-0002-7812-7736
    corresponding: false
    affiliations:
      - name: Cornell AgriTech
        address: 102 Hedrick Hall
        city: Geneva
        state: NY
        postal-code: 14456
  - name: Virginia M. Moore
    orcid: 0000-0001-7888-3366
    corresponding: false
    affiliations:
      - name: Cornell University
        address: 162 Emerson Hall
        city: Ithaca
        state: NY
        postal-code: 14853    
title-block-style: none
keywords:
  - Hemp
  - Grain
  - Spectroscopy
abstract: |
      The protein concentration of hemp (*Cannabis sativa* L.) grain is of interest to researchers, producers, and consumers. This study was conducted to determine whether hemp grain can be non-destructively assayed for crude protein (CP) concentration using spectra obtained from near-infrared spectroscopy (NIRS) to build a prediction model for crude protein concentration using partial least squares regression (PLSR). One hundred and fourty-nine whole hemp grain samples were obtained from 18 cultivar trials in New York (NY) from 2017-2021. The samples' NIRS spectra were collected and the samples were ground and assayed by combustion. Seven potential preprocessing methods, as well as untransformed spectra, were tested using 100 training and testing set splits of the data and the best method was selected. That method was applied to 1000 additional splits of the data set. Model fit was evaluated using RMSE, R^2^, relative predicted deviation (RPD), and ratio of performance to interquartile distance (RPIQ). Once a preprocessing method was selected, the optimal number of model components and prediction performance on the testing sets were examined. A preprocessing method consisting of the standard normal variate transformation following a Savitzky-Golay filter had the lowest RMSE and the highest R^2^, RPD and RPIQ, with RPD and RPIQ 2.1%, and 2.4% higher than a Savitzky-Golay filter by itself (significant at $\alpha$ \<0.05). All preprocessing methods outperformed untransformed spectra. Optimal final models typically consisted of 12 components. Seventy-four percent of the 1000 final models had, at minimum, the ability to distinguish between high and low values of CP concentration, with 49% of the models capable of approximating quantitative prodiction. The models tested to overestimate CP concentration by 0.5% in the lowest tertile of samples and underestimate CP concentration by 0.4% in the highest tertile of samples. The worst-predicted samples tended to come from Geneva, NY, possibly as a result of the models' class imbalance (half of the samples were from Ithaca, NY while 28% were from Geneva). The research shows the promise that NIRS offers in the non-desctructive assay of CP concentration in hemp grain.

plain-language-summary: |
  A model was developed to predict percent crude protein in hemp grain using near infrared spectroscopy.
key-points:
  - Models were developed to predict crude protein concentration in hemp grain using near infrared spectroscopy.
  - Most models were able to distinguish between high and lower concentrations of crude protein. 
  - Models could be further optimized by including more samples and rectifying class imbalances between environments.
date: last-modified
bibliography: 
  - references.bib
  - grateful-refs.bib
csl: apa.csl
number-sections: true
crossref:
  custom:
    - kind: float
      key: suppfig
      latex-env: suppfig
      reference-prefix: Figure S
      space-before-numbering: false
      latex-list-of-description: Supplementary Figure
---

```{r}
#| label: setup
#| eval: true

library(knitr)
library(ggplot2)
library(targets)

# Load all required targets objects
hemp_data <- tryCatch(tar_read(hemp_data), error = function(e) NULL)
best_method <- tryCatch(tar_read(best_method), error = function(e) "Not available")
final_model_analysis <- tryCatch(tar_read(final_model_analysis), error = function(e) NULL)
preprocessing_analysis <- tryCatch(tar_read(preprocessing_analysis), error = function(e) NULL)

# Also load the table and figure objects that are referenced later
table_sample_summary <- tryCatch(tar_read(table_sample_summary), error = function(e) NULL)
table_preprocessing <- tryCatch(tar_read(table_preprocessing), error = function(e) NULL)
fig_model_calibration <- tryCatch(tar_read(fig_model_calibration), error = function(e) NULL)
fig_performance_boxplot <- tryCatch(tar_read(fig_performance_boxplot), error = function(e) NULL)
fig_validation_errors <- tryCatch(tar_read(fig_validation_errors), error = function(e) NULL)

# Show what we got
cat("Simple check:\n")
cat("- Hemp data:", ifelse(is.null(hemp_data), "NULL", paste(nrow(hemp_data), "samples")), "\n")
cat("- Best method:", best_method, "\n")
cat("- Final analysis:", ifelse(is.null(final_model_analysis), "NULL", "Available"), "\n")
cat("- Preprocessing analysis:", ifelse(is.null(preprocessing_analysis), "NULL", "Available"), "\n")
```

CP, crude protein; NIR, near-infrared; NIRS, Near-infrared spectroscopy; NY, New York; PLSR, partial least squares regression; RPD, relative predicted deviation, RPIQ, ratio of performance to interquartile distance; SG, Savitzky-Golay; SNV, standard normal variate, SNV-SG, standard normal variate following Savitzky-Golay

## INTRODUCTION

Hemp (*Cannabis sativa* L.) is an annual crop with potential uses as a source of food or feed, derived from the grain, and fiber (bast or hurd), derived from the stalk. Hemp cultivars are commonly grown for one or both purposes and a cultivar may be called a grain, fiber, or dual-purpose type. Because of its nutritional importance, the protein concentration of a grain crop is a prime consideration for researchers, producers, and consumers. Whole hemp grain typically contains approximately 200-300 g kg^−1^ protein [@ely_industrial_2022; @barta_proteomic_2024; @callaway_hempseed_2004; @liu2023]. Crude protein is often used as a proxy for the direct measurement of protein concentration and consists of the multiplication of nitrogen concentration by a conversion factor, often 6.25 [@hayes_measuring_2020].

Near-infrared (NIR) spectroscopy (NIRS) technology is rapid, non-destructive, and inexpensive. It consists of the measurement of NIR radiation reflected and absorbed from a sample (the spectra) and the relation of the spectra to primary analytical values, typically obtained using wet chemistry assays, for components such as moisture, protein, fat, or fiber [@roberts_near-infrared_2004]. NIRS technology has been used since the 1970's to assess forage CP concentration [@reeves_potential_2012; @williams_application_1975]. A NIRS calibration set often consists of samples from diverse genotypes of one species grown in many environments encompassing the range of expected values from the analyte or analytes [@chadalavada_nir_2022]. Partial least squares regression (PLSR) is a typical method used in the agricultural and food sciences to relate spectra to analyte [@roberts_near-infrared_2004]. Partial least squares regression calculates components that maximize covariance between predictor and response variables. Partial least squares regression uses some number of components, often selected via cross-validation, to fit the regression model and is commonly used in spectroscopy because it tends to work well with highly correlated, noisy spectral data [@wold_pls-regression_2001].

A NIRS-scanned sample of whole grain may be used for other purposes besides the scan, including planting as a seed. In wheat and corn, grain protein content has been shown to be heritable [@giancaspro_genetic_2019; @geyer_genetics_2022]. This suggests that NIRS technology could serve as a resource to rapidly identify high concentration CP hemp germplasm, enabling the screening of germplasm as seed, before planting to the field, and facilitating the efficient development of high concentration CP hemp populations.

For this study, a benchtop NIR spectrometer was used to develop a model to predict CP concentration based on a data set of hemp grain representing multiple years, locations, and cultivars from grain and dual-purpose hemp types using PLSR.

## MATERIALS AND METHODS

### Hemp Grain Sample Background

Spectral data were obtained from whole (unground) hemp grain samples, harvested at maturity, collected from 2017--2021 from r nrow(distinct(hemp_data |> filter(loc!= "kentucky"), harv_year, loc)) cultivar trials in New York (NY) (149 samples). Grain samples were obtained by hand sampling or mechanical harvest and were cleaned of chaff and dried at 30 C for six days in a forced-air dryer. All CP values were expressed as concentration dry matter. In total, `r nrow(hemp_data)` samples from `r hemp_data$cultivar |> unique() |> length()` cultivars were represented in the data set. Cultivars were grain or dual-purpose types and included both commercially available and experimental material. Seventy-eight samples were scanned and assayed in 2017, 19 in 2018, 24 in 2019, and 28 in 2021. More information about hemp cultivars and locations is available in Supplemental Table S1.

```{r}
#| label: tbl-hemp-provenance
#| tbl-cap: "Sample distribution by location and type"

# OPTION 1: Read directly from source file (recommended)
library(data.table)
cultivar_data <- fread("input_data/final_data_set/cultivar_table_clean.csv")

# Create the table using knitr::kable for consistency with your style
cultivar_data |>
  knitr::kable(
    caption = "Tally of hemp cultivars and locations. Private cultivars are labeled 'Cultivar1', 'Cultivar2', etc., while experimental cultivars are labeled 'Experimental1', 'Experimental2', etc."
  )

```

All cultivar trials were planted in randomized complete block design with each cultivar replicated four times. The 2017 data were comprised of samples from the same 13 cultivars sampled from six NY locations. For those trials, grain was harvested from each plot individually and aggregated by cultivar within each trial. Four subsamples were drawn from each aggregated sample and scanned separately. These spectra were averaged at each 2 nm increment. All remaining samples from 2018-2021 were collected on a per-plot basis. All cultivars and locations were represented in 2017, but only a selected subset of cultivar-location combinations were represented in 2018-2021 because not all cultivars were planted everywhere and only a portion of these cultivar-location combinations were sampled, scanned, and assayed due to logistical constraints.

### Spectral Data Collection and Preprocessing

A benchtop NIR spectrometer (FOSS/ NIR FOSS/ NIR Systems model 5000) was used to obtain the spectra (FOSS North America, Eden Prairie, MN, USA). Spectra were collected every 2 nm from 1100-2498 nm and the logarithm of reciprocal reflectance was recorded. A 1/4 rectangular sample cup (5.7 cm × 4.6 cm) was used to scan the samples.

WINISI software version 1.02A (Infrasoft International, Port Matilda, PA, USA) was used to calculate the mean spectra in 2017 and to select samples for laboratory assay in all years. Samples were selected according to their spectral distance from their nearest neighbor within the data set with a cutoff of a distance of 0.6 H, where H is approximately equal to the squared Mahalanobis distance divided by the number of principal components used in the calculation [@garrido-varo_note_2019]. Prior to selection, spectra were preprocessed using SNV (standard normal variate)-detrend with settings 1,4,4,1 for the derivative, gap, smooth, and smooth-two settings respectively.

### Laboratory Validation

Laboratory assays were performed by Dairy One Forage Laboratory (Ithaca, NY). For those assays, 1 mm ground samples were analyzed by combustion using a CN628 or CN928 Carbon/Nitrogen Determinator. Samples from 2017 were aggregated as described above, but the remaining samples were not aggregated.

### R software and packages used

### Model Development

Training and testing sets were created by dividing samples by their laboratory CP concentration values into tertiles to ensure that a representative range of values was present in both training and testing sets. Within each tertile, 75% of the samples were randomly assigned to the training set and the remaining 25% were assigned to the testing set. For each training set, models were developed in the caret package using PLSR. In fitting the model, the number of components was optimized over a grid search from 1-20. Model performance was evaluated with 25 iterations of bootstrapping and minimized RMSE in selecting the number of components in the final model.

Initially a number of common spectral preprocessing methods were tested by creating 100 training and testing sets, as described above. Spectral data were transformed by each of the following methods: 1) first derivative; 2) Savitzky-Golay (SG) using the first derivative, third order polynomial, and a window of size five; 3) gap-segment derivative using the first derivative, a gap of 11, and a segment size of five; 4) SNV; 5) standard normal variate following Savitzky-Golay (SNV-SG) using the same SG parameters as above; 6) SNV-detrend with second order polynomial; and 7) multiplicative scatter correction. For comparison, models were also developed using untransformed spectra.

For each of these preprocessing methods, models were fit and predictions were made on the corresponding testing set. Since there were seven preprocessing methods as well as untransformed spectra, eight separate models were fit for each of the 100 sets. The relationship between the predicted and actual values of the test set were calculated via RMSE, R^2^, relative predicted deviation (RPD), and ratio of performance to interquartile distance (RPIQ), four common model assessment metrics. Larger R^2^, RPD and RPIQ values and smaller RMSE values are best. The answer to the question of exactly which values constitute a "good" model varies depending upon the reference consulted, but for simplicity's sake the standard established for an acceptable model was R^2^ \> 0.80, an RPD greater than 2.5 and ideally greater than 3 ("good" to "excellent" quantitative prediction), and an RPIQ greater than 2.3 but ideally greater than 4.1 prediction on the testing set [@rawal_visible_2024; @luce_prediction_2017; @chadalavada_nir_2022].

Analyses of variance were performed for each of these metrics in order to compare preprocessing methods. For each ANOVA, each data set was considered as a subject and different variances were allowed for each preprocessing method. Once the most promising preprocessing method was identified, 1000 more training and testing sets were created, and models were developed with that method. Performance on the testing sets was summarized with RMSE, R^2^, RPD, and RPIQ. The pattern of errors, expressed as the difference between the actual and predicted values for a given sample, was examined.

## RESULTS AND DISCUSSION

### Laboratory assay CP values

Laboratory assay CP concentration values are summarized in @tbl-lab-protein-vals. These are similar to the range of values observed in the literature, indicating an reasonable basis for a chemometric model. The values were left-skewed (skewness of `r round(calculate_skewness(hemp_data$crude_protein), 2)`) and two thirds of the samples contained more than 250 g kg ^-1^ CP.

# Hemp NIR Analysis - Streamlined Pipeline Results

## Data Overview

```{r}
#| label: data-overview
#| eval: true

if (!is.null(hemp_data)) {
  n_samples <- nrow(hemp_data)
  
  # Basic data summary
  cat("**Dataset Summary:**\n")
  cat("- Total samples: **", n_samples, "**\n")
  
  if ("crude_protein" %in% names(hemp_data)) {
    protein_stats <- summary(hemp_data$crude_protein)
    cat("- Protein range: ", round(protein_stats["Min."], 1), " - ", round(protein_stats["Max."], 1), " g/kg\n")
    cat("- Protein mean: ", round(protein_stats["Mean"], 1), " g/kg\n")
  }
  
  if ("location" %in% names(hemp_data)) {
    locations <- unique(hemp_data$location)
    n_locations <- length(locations)
    cat("- Locations: ", n_locations, " (", paste(head(locations, 3), collapse = ", "), 
        ifelse(n_locations > 3, ", ...", ""), ")\n")
  }
  
  if ("year" %in% names(hemp_data)) {
    years <- range(hemp_data$year, na.rm = TRUE)
    cat("- Study period: ", years[1], "-", years[2], "\n")
  }
  
  # Spectral data info
  spectral_cols <- grep("^x[0-9]+$", names(hemp_data), value = TRUE)
  if (length(spectral_cols) > 0) {
    cat("- Spectral variables: ", length(spectral_cols), " wavelengths\n")
  }
  
} else {
  cat("❌ **Hemp data not loaded yet**\n")
  cat("- Run `tar_make()` to process the data pipeline\n")
}
```

## Preprocessing Method Selection

**Optimal method identified:** `r ifelse(!is.null(best_method) && best_method != "Method TBD", paste0("**", best_method, "**"), "Analysis in progress...")`

```{r}
#| label: preprocessing-results
#| eval: true

if (!is.null(preprocessing_analysis)) {
  cat("### Preprocessing Comparison Summary\n\n")
  
  if ("summary" %in% names(preprocessing_analysis)) {
    summary_data <- preprocessing_analysis$summary
    n_methods <- nrow(summary_data)
    cat("- **Methods tested:** ", n_methods, "\n")
    
    if ("mean_rmse" %in% names(summary_data)) {
      best_rmse <- min(summary_data$mean_rmse, na.rm = TRUE)
      worst_rmse <- max(summary_data$mean_rmse, na.rm = TRUE)
      cat("- **RMSE range:** ", round(best_rmse, 2), " - ", round(worst_rmse, 2), " g/kg\n")
    }
    
    if ("mean_rsq" %in% names(summary_data)) {
      best_rsq <- max(summary_data$mean_rsq, na.rm = TRUE)
      cat("- **Best R²:** ", round(best_rsq, 3), "\n")
    }
  }
} else {
  cat("⏳ Preprocessing comparison in progress...\n")
}
```

## Model Performance

```{r}
#| label: model-performance
#| eval: true

if (!is.null(final_model_analysis)) {
  cat("### Final Model Performance\n\n")
  
  if ("overall_stats" %in% names(final_model_analysis)) {
    stats <- final_model_analysis$overall_stats
    
    cat("**Performance Metrics (mean ± SD):**\n\n")
    cat("| Metric | Value | Interpretation |\n")
    cat("|--------|-------|----------------|\n")
    
    if ("mean_rmse" %in% names(stats)) {
      rmse_val <- round(stats$mean_rmse, 2)
      rmse_sd <- round(stats$sd_rmse, 2)
      cat("| RMSE | ", rmse_val, " ± ", rmse_sd, " g/kg | Root Mean Square Error |\n")
    }
    
    if ("mean_rsq" %in% names(stats)) {
      rsq_val <- round(stats$mean_rsq, 3)
      rsq_sd <- round(stats$sd_rsq, 3)
      rsq_percent <- round(rsq_val * 100, 1)
      cat("| R² | ", rsq_val, " ± ", rsq_sd, " | ", rsq_percent, "% variance explained |\n")
    }
    
    if ("mean_rpd" %in% names(stats)) {
      rpd_val <- round(stats$mean_rpd, 2)
      rpd_sd <- round(stats$sd_rpd, 2)
      
      # RPD interpretation
      if (rpd_val > 2.5) {
        rpd_qual <- "Excellent"
      } else if (rpd_val > 2.0) {
        rpd_qual <- "Good"
      } else if (rpd_val > 1.5) {
        rpd_qual <- "Approximate"
      } else {
        rpd_qual <- "Poor"
      }
      
      cat("| RPD | ", rpd_val, " ± ", rpd_sd, " | ", rpd_qual, " for quantitative use |\n")
    }
    
    # Model classification summary
    if ("classification" %in% names(final_model_analysis)) {
      class_info <- final_model_analysis$classification
      cat("\n**Model Quality Distribution:**\n")
      cat("- Excellent models (RPD > 2.5): ", class_info$excellent, "\n")
      cat("- Good models (RPD 2.0-2.5): ", class_info$good, "\n")
      cat("- Approximate models (RPD 1.5-2.0): ", class_info$approximate, "\n")
    }
  }
} else {
  cat("⏳ Final model analysis in progress...\n")
}
```

## Data Tables

### Sample Summary

```{r}
#| label: tbl-sample-summary
#| tbl-cap: "Hemp grain sample summary"
#| eval: true

if (!is.null(table_sample_summary)) {
  table_sample_summary
} else {
  cat("⏳ Sample summary table being generated...\n")
}
```

### Preprocessing Method Comparison

```{r}
#| label: tbl-preprocessing
#| tbl-cap: "Comparison of spectral preprocessing methods"
#| eval: true

if (!is.null(table_preprocessing)) {
  table_preprocessing
} else {
  cat("⏳ Preprocessing comparison table being generated...\n")
}
```

## Visualizations

### Model Calibration

```{r}
#| label: fig-calibration
#| fig-cap: "Model calibration showing component optimization"
#| eval: true

if (!is.null(fig_model_calibration)) {
  print(fig_model_calibration)
} else {
  cat("⏳ Model calibration plot being generated...\n")
}
```

### Performance Distribution

```{r}
#| label: fig-performance
#| fig-cap: "Distribution of model performance metrics across iterations"
#| eval: true

if (!is.null(fig_performance_boxplot)) {
  print(fig_performance_boxplot)
} else {
  cat("⏳ Performance distribution plot being generated...\n")
}
```

### Validation Analysis

```{r}
#| label: fig-validation
#| fig-cap: "Validation error analysis across protein concentration range"
#| eval: true

if (!is.null(fig_validation_errors)) {
  print(fig_validation_errors)
} else {
  cat("⏳ Validation analysis plot being generated...\n")
}
```

## Summary and Conclusions

```{r}
#| label: conclusions
#| eval: true

cat("### Research Outcomes\n\n")

# Check completion status
n_complete <- sum(!sapply(list(hemp_data, best_method, final_model_analysis), is.null))
total_components <- 3

if (n_complete == total_components) {
  cat("✅ **Analysis Complete:** All pipeline components successfully executed\n\n")
  
  if (!is.null(best_method) && best_method != "Method TBD") {
    cat("🎯 **Optimal preprocessing identified:** ", best_method, " provides best prediction performance\n\n")
  }
  
  if (!is.null(final_model_analysis) && "overall_stats" %in% names(final_model_analysis)) {
    stats <- final_model_analysis$overall_stats
    if ("mean_rpd" %in% names(stats)) {
      rpd_val <- round(stats$mean_rpd, 2)
      cat("📈 **Prediction quality:** RPD = ", rpd_val, " indicates ", 
          ifelse(rpd_val > 2.0, "good to excellent", "moderate"), 
          " prediction capability\n\n")
    }
  }
  
  cat("🔬 **NIR spectroscopy demonstrates strong potential** for non-destructive hemp grain protein assessment\n\n")
  cat("⚙️ **Preprocessing optimization proves critical** for achieving reliable predictions\n\n")
  cat("🔄 **Reproducible pipeline ensures** transparent and reliable research workflow\n\n")
  
} else {
  cat("⏳ **Analysis Status:** ", n_complete, " of ", total_components, " components complete\n\n")
  cat("To complete the analysis, run: `tar_make()`\n\n")
}

cat("### Technical Implementation\n\n")
cat("- **Framework:** R targets pipeline for reproducible research\n")
cat("- **Model type:** Partial Least Squares Regression (PLSR)\n")
cat("- **Validation:** Cross-validation with multiple preprocessing approaches\n")
cat("- **Iterations:** Multiple modeling iterations for robust performance assessment\n")

if (!is.null(hemp_data)) {
  cat("- **Sample size:** ", nrow(hemp_data), " hemp grain samples\n")
  spectral_cols <- grep("^x[0-9]+$", names(hemp_data), value = TRUE)
  if (length(spectral_cols) > 0) {
    wavelength_range <- c(1100, 2500)  # Typical NIR range
    cat("- **Spectral range:** ", wavelength_range[1], "-", wavelength_range[2], " nm (", length(spectral_cols), " variables)\n")
  }
}
```

---

**Pipeline Status:** `r ifelse(n_complete == total_components, "✅ Complete", paste("⏳", n_complete, "of", total_components, "complete"))`  
**Generated:** `r format(Sys.time())`  
**Framework:** Targets-based reproducible workflow